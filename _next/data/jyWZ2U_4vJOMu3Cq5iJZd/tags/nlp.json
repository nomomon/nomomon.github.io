{"pageProps":{"title":"nlp","posts":[{"path":"public/Bayes Feed.md","publish":true,"title":"Bayes Feed","description":"An RSS feed with a Naive Bayes recommender that is learning online.","date":"17 Dec, 2022","tags":["next.js","firebase","material-ui","nlp","rss","vercel","project"],"content":"\n![[bayes-feed.jpeg]]\n\n[RSS feeds](https://ru.wikipedia.org/wiki/RSS) are a convenient and old–fashioned way to follow blogs and websites. \n\nThis December, I returned to reading as my main source of getting information. In doing so, I came across a recommendation system with a Naive Bayes classifier, which was used to filter an RSS feed. This inspired me to create a similar application for myself.\n\nThe idea of the project is to collect posts from RSS feeds, use the classifier to predict whether I will like the post or not, and then train the algorithm on my reactions. Hence, this algorithm is learning in [online mode](https://en.wikipedia.org/wiki/Online_machine_learning).\n\nAt first I used a Telegram bot as an interface, but I encountered a lot of errors and inconveniences when parsing messages. I also used PocketBase for the backend, but it turned out that it is still in beta and query functions I needed were not available. As the result, I changed the stack to Next.js with MUI for frontend and Firebase for backend.\n\nUpdate\n---\n\nWith the latest update, I've made it easier and more efficient for users to access and filter their news.\n\nOne of the major updates I've made is the addition of authentication. Now, users can create their own accounts and have all their data stored in a single object, making it easier to query and manage.\n\nI've also streamlined the process of retrieving data by making all necessary requests in a single request. This not only makes the process faster, but it also helps stay within the Firebase free limit. \n\nBut that's not all - I've also improved the functionality of our Naive Bayes classifier. Rather than simply classifying articles as either liked or not liked, it now considers the approximate probability of a user liking an article. This gives users a more personalized experience and helps them find the content that is most relevant to them.\n\nFinally, I've hosted the app on Vercel, a reliable and user-friendly platform. The only issue I've encountered is the limitation of 12 requests for server functions on the free plan. While I understand that paying the $20/month fee will make the app be perfect, I cannot afford that for a personal use project.\n\nOverall, I'm confident that my RSS feed application will provide users with a valuable and enjoyable experience. I hope you'll give it a try and see for yourself!","md":"<p>![[bayes-feed.jpeg]]</p>\n<p><a href=\"https://ru.wikipedia.org/wiki/RSS\">RSS feeds</a> are a convenient and old–fashioned way to follow blogs and websites.</p>\n<p>This December, I returned to reading as my main source of getting information. In doing so, I came across a recommendation system with a Naive Bayes classifier, which was used to filter an RSS feed. This inspired me to create a similar application for myself.</p>\n<p>The idea of the project is to collect posts from RSS feeds, use the classifier to predict whether I will like the post or not, and then train the algorithm on my reactions. Hence, this algorithm is learning in <a href=\"https://en.wikipedia.org/wiki/Online_machine_learning\">online mode</a>.</p>\n<p>At first I used a Telegram bot as an interface, but I encountered a lot of errors and inconveniences when parsing messages. I also used PocketBase for the backend, but it turned out that it is still in beta and query functions I needed were not available. As the result, I changed the stack to Next.js with MUI for frontend and Firebase for backend.</p>\n<h2>Update</h2>\n<p>With the latest update, I’ve made it easier and more efficient for users to access and filter their news.</p>\n<p>One of the major updates I’ve made is the addition of authentication. Now, users can create their own accounts and have all their data stored in a single object, making it easier to query and manage.</p>\n<p>I’ve also streamlined the process of retrieving data by making all necessary requests in a single request. This not only makes the process faster, but it also helps stay within the Firebase free limit.</p>\n<p>But that’s not all - I’ve also improved the functionality of our Naive Bayes classifier. Rather than simply classifying articles as either liked or not liked, it now considers the approximate probability of a user liking an article. This gives users a more personalized experience and helps them find the content that is most relevant to them.</p>\n<p>Finally, I’ve hosted the app on Vercel, a reliable and user-friendly platform. The only issue I’ve encountered is the limitation of 12 requests for server functions on the free plan. While I understand that paying the $20/month fee will make the app be perfect, I cannot afford that for a personal use project.</p>\n<p>Overall, I’m confident that my RSS feed application will provide users with a valuable and enjoyable experience. I hope you’ll give it a try and see for yourself!</p>\n"},{"path":"public/Data Science Bootcamp Yandex Practicum.md","publish":true,"title":"Data Science Bootcamp Yandex Practicum","description":"Collection of final projects from data science bootcamp from Yandex Practicum.","date":"27 Feb, 2022","tags":["python","numpy","pandas","sklearn","tensorflow","keras","compvis","nlp","bootcamp","project"],"content":"\n![[yandex-practicum.png]]\n\nYandex Practicum is a data science bootcamp that I attended in 2022. The bootcamp is a 9-month long program that covers the basics of data science and machine learning. The program is divided into 3 modules:\n\n-   Data Preprocessing,\n-   Data Analysis,\n-   Machine Learning.\n\nEach module consists of 3-4 projects that tackle close to real-world problems. The projects are evaluated by a team of mentors. The final project is a capstone project that is made for and evaluated by real companies.\n\n## Projects\n\n**The project solutions are not shared publicly to prevent plagiarism. To see my solutions, send me a message with your github email.**\n\n<table>\n    <tr>\n        <th>Project</th>\n        <th>Description</th>\n        <th>Tools</th>\n        <th>Source</th>\n    </tr>\n    <tr>\n        <td>Exploratory Data Analysis</td>\n        <td>Blah blah</td>\n        <td>Python, Pandas, Matplotlib, Seaborn</td>\n        <td><a href=\"#\">asd</a></td>\n    <tr/>\n</table>\n","md":"<p>![[yandex-practicum.png]]</p>\n<p>Yandex Practicum is a data science bootcamp that I attended in 2022. The bootcamp is a 9-month long program that covers the basics of data science and machine learning. The program is divided into 3 modules:</p>\n<ul>\n<li>Data Preprocessing,</li>\n<li>Data Analysis,</li>\n<li>Machine Learning.</li>\n</ul>\n<p>Each module consists of 3-4 projects that tackle close to real-world problems. The projects are evaluated by a team of mentors. The final project is a capstone project that is made for and evaluated by real companies.</p>\n<h2>Projects</h2>\n<p><strong>The project solutions are not shared publicly to prevent plagiarism. To see my solutions, send me a message with your github email.</strong></p>\n<table>\n    <tr>\n        <th>Project</th>\n        <th>Description</th>\n        <th>Tools</th>\n        <th>Source</th>\n    </tr>\n    <tr>\n        <td>Exploratory Data Analysis</td>\n        <td>Blah blah</td>\n        <td>Python, Pandas, Matplotlib, Seaborn</td>\n        <td><a href=\"#\">asd</a></td>\n    <tr/>\n</table>\n"},{"path":"public/Markov Chain Text Generator.md","publish":true,"title":"Markov Chain Text Generator","description":"Text generator written in React.js that uses Markov chains to generate text based on a given input.","date":"Aug 6, 2022","tags":["react","node.js","nlp","markov-chain","project"],"content":"\n![[markov-chain-text.jpeg]]\n\nRecently, I was reading in the Y.Practicum blog and found a [group of posts](https://thecode.media/markov-chain/) there about Markov chains. The articles were written in a easy to understand and engaging way, and I thought it would be interesting to see for myself how the algorithm works.\n\nFirst of all, the definition:\n\n> Markov chains are a sequence of events or actions, where each new event depends only on the previous one and does not take into account all other events. Such an algorithm does not remember what happened before, but only looks at the previous state.\n\nIt will be easier to understand if you look at the following example:\n\n```javascript\nconst dataset = [\"I am a human\", \"I am a programmer\", \"I am not a dog\"];\n```\n\nThis dataset results in the following tree diagram:\n\n![[diagram.png]]\n\nIn context of text generation, each word is an event. The next word is selected randomly from the words that stood after the last word. The probability of each word transition is determined by the frequency of the pair. After a random word is selected, the same thing is repeated with the sentence until the final word appears.\n\nIn the example from the image, after the word “a” in the source text there could be the words “programmer”, “human”, and “dog”. So, the new sentences that can be generated from the dataset are:\n\n> I am not a programmer\n>\n> I am not a human\n>\n> I am a dog\n\nIt certainly doesn't compare to GPT-3 or Copilot, but the results are sure ridiculous.\n\n## Results\n\nExample in Russian\n\n![demo](https://github.com/nomomon/markov-chain-text/raw/master/screenshot.png)\n","md":"<p>![[markov-chain-text.jpeg]]</p>\n<p>Recently, I was reading in the Y.Practicum blog and found a <a href=\"https://thecode.media/markov-chain/\">group of posts</a> there about Markov chains. The articles were written in a easy to understand and engaging way, and I thought it would be interesting to see for myself how the algorithm works.</p>\n<p>First of all, the definition:</p>\n<blockquote>\n<p>Markov chains are a sequence of events or actions, where each new event depends only on the previous one and does not take into account all other events. Such an algorithm does not remember what happened before, but only looks at the previous state.</p>\n</blockquote>\n<p>It will be easier to understand if you look at the following example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> dataset = [<span class=\"hljs-string\">&quot;I am a human&quot;</span>, <span class=\"hljs-string\">&quot;I am a programmer&quot;</span>, <span class=\"hljs-string\">&quot;I am not a dog&quot;</span>];\n</code></pre>\n<p>This dataset results in the following tree diagram:</p>\n<p>![[diagram.png]]</p>\n<p>In context of text generation, each word is an event. The next word is selected randomly from the words that stood after the last word. The probability of each word transition is determined by the frequency of the pair. After a random word is selected, the same thing is repeated with the sentence until the final word appears.</p>\n<p>In the example from the image, after the word “a” in the source text there could be the words “programmer”, “human”, and “dog”. So, the new sentences that can be generated from the dataset are:</p>\n<blockquote>\n<p>I am not a programmer</p>\n<p>I am not a human</p>\n<p>I am a dog</p>\n</blockquote>\n<p>It certainly doesn’t compare to GPT-3 or Copilot, but the results are sure ridiculous.</p>\n<h2>Results</h2>\n<p>Example in Russian</p>\n<p><img src=\"https://github.com/nomomon/markov-chain-text/raw/master/screenshot.png\" alt=\"demo\"></p>\n"}]},"__N_SSG":true}