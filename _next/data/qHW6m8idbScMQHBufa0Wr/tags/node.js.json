{"pageProps":{"title":"node.js","posts":[{"path":"public/Inversive Geometry.md","publish":true,"title":"Inversive Geometry","description":"React.js app that visually demonstrates the inversive geometry transformation of a point in a circle on a given image.","date":"12 Aug, 2022","tags":["react","node.js","math","project"],"content":"\nGeometrical inversion is defined as\n\n> For some point $O$, and radius $R$, geometrical inversion – is a plane transformation where each point $P$ is mapped to a point $P'$, which lies on ray $OP$ and satisfies\n> $$OP \\times OP' = R^2.$$\n\nThis gives rise to an amazing tool to solve olympiad geometric problems.\n\nBack in highschool, I tried to make a program that performs inversion on images. I did succeed, but it seems I lost the code. In general _it was not user-friendly_ because it worked through the terminal.\n\nSo, here I am, recreating my dream program as a webapp. This was an interesting project and along the way I came up with a nice optimization that makes the code easy to read.\n\nWorking with pixels made the coordinates descrete and to improve the quality of the image I took an average of pixel colors that were mapped to a single point. Instead of taking their mean, I took the root mean squared because that is [how pixel colors should be added](https://www.youtube.com/watch?v=LKnqECcg6Gw&ab_channel=minutephysics).\n\n## A few notes\n\n- If you look at the inversed image, you will see that there are spots with missing pixels. This is because these pixels were mapped outside of the image boudaries (and hence lost).\n- The image pixelates quickly, this is because when inverted, multiple pixels outside the circle of inversion are mapped to a pixel inside the circle.\n- For the future, it would be cool to add an animation that shows how each pixel is translated.\n\n## Demo\n\nThis is an example of how the image is inverted. What you can notice is ...\n\n- Points inside the circle are mapped to points outside the circle.\n- By the property of inversion, points $A$ and $A'$ change places, same goes for $B$ and $B'$.\n- Points on the dotted circle change thier place, but the dotted circle as a shape doesnot change its place.\n- Lines that were not passing through the center of inversion transformed into semicircles that do pass through the center of inversion.\n\n![demo](https://github.com/nomomon/inversive-geometry/raw/master/demo.gif)\n","md":"<p>Geometrical inversion is defined as</p>\n<blockquote>\n<p>For some point <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.726ex\" height=\"1.643ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -704 763 726\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\" style=\"stroke-width: 3;\"/></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi></math></mjx-assistive-mml></mjx-container>, and radius <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.048ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.717ex\" height=\"1.593ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 759 704\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\" style=\"stroke-width: 3;\"/></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>R</mi></math></mjx-assistive-mml></mjx-container>, geometrical inversion – is a plane transformation where each point <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.699ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 751 683\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\" style=\"stroke-width: 3;\"/></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>P</mi></math></mjx-assistive-mml></mjx-container> is mapped to a point <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.452ex\" height=\"1.717ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -759 1083.9 759\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"mo\" transform=\"translate(839.5,363) scale(0.707)\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\" style=\"stroke-width: 3;\"/></g></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msup><mi>P</mi><mo data-mjx-alternate=\"1\">′</mo></msup></math></mjx-assistive-mml></mjx-container>, which lies on ray <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.425ex\" height=\"1.643ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -704 1514 726\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"mi\" transform=\"translate(763,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\" style=\"stroke-width: 3;\"/></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mi>P</mi></math></mjx-assistive-mml></mjx-container> and satisfies</p>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" style=\"direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16.72ex\" height=\"2.185ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 7390.5 965.9\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"mi\" transform=\"translate(763,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"mo\" transform=\"translate(1736.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"mi\" transform=\"translate(2736.4,0)\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"msup\" transform=\"translate(3499.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"mo\" transform=\"translate(839.5,413) scale(0.707)\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\" style=\"stroke-width: 3;\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4861.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"msup\" transform=\"translate(5916.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"mn\" transform=\"translate(792,413) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" style=\"stroke-width: 3;\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7112.5,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" style=\"stroke-width: 3;\"/></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"block\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><mi>O</mi><mi>P</mi><mo>×</mo><mi>O</mi><msup><mi>P</mi><mo data-mjx-alternate=\"1\">′</mo></msup><mo>=</mo><msup><mi>R</mi><mn>2</mn></msup><mo>.</mo></math></mjx-assistive-mml></mjx-container></blockquote>\n<p>This gives rise to an amazing tool to solve olympiad geometric problems.</p>\n<p>Back in highschool, I tried to make a program that performs inversion on images. I did succeed, but it seems I lost the code. In general <em>it was not user-friendly</em> because it worked through the terminal.</p>\n<p>So, here I am, recreating my dream program as a webapp. This was an interesting project and along the way I came up with a nice optimization that makes the code easy to read.</p>\n<p>Working with pixels made the coordinates descrete and to improve the quality of the image I took an average of pixel colors that were mapped to a single point. Instead of taking their mean, I took the root mean squared because that is <a href=\"https://www.youtube.com/watch?v=LKnqECcg6Gw&amp;ab_channel=minutephysics\">how pixel colors should be added</a>.</p>\n<h2>A few notes</h2>\n<ul>\n<li>If you look at the inversed image, you will see that there are spots with missing pixels. This is because these pixels were mapped outside of the image boudaries (and hence lost).</li>\n<li>The image pixelates quickly, this is because when inverted, multiple pixels outside the circle of inversion are mapped to a pixel inside the circle.</li>\n<li>For the future, it would be cool to add an animation that shows how each pixel is translated.</li>\n</ul>\n<h2>Demo</h2>\n<p>This is an example of how the image is inverted. What you can notice is …</p>\n<ul>\n<li>Points inside the circle are mapped to points outside the circle.</li>\n<li>By the property of inversion, points <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.697ex\" height=\"1.62ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 750 716\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\" style=\"stroke-width: 3;\"/></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></mjx-assistive-mml></mjx-container> and <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.325ex\" height=\"1.717ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -759 1027.5 759\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"mo\" transform=\"translate(783,363) scale(0.707)\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\" style=\"stroke-width: 3;\"/></g></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msup><mi>A</mi><mo data-mjx-alternate=\"1\">′</mo></msup></math></mjx-assistive-mml></mjx-container> change places, same goes for <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.717ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 759 683\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\" style=\"stroke-width: 3;\"/></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>B</mi></math></mjx-assistive-mml></mjx-container> and <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"direction: ltr; position: relative;\"><svg style=\"overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.717ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -759 1036.5 759\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\" style=\"stroke-width: 3;\"/></g><g data-mml-node=\"mo\" transform=\"translate(792,363) scale(0.707)\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\" style=\"stroke-width: 3;\"/></g></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\" style=\"top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msup><mi>B</mi><mo data-mjx-alternate=\"1\">′</mo></msup></math></mjx-assistive-mml></mjx-container>.</li>\n<li>Points on the dotted circle change thier place, but the dotted circle as a shape doesnot change its place.</li>\n<li>Lines that were not passing through the center of inversion transformed into semicircles that do pass through the center of inversion.</li>\n</ul>\n<p><img src=\"https://github.com/nomomon/inversive-geometry/raw/master/demo.gif\" alt=\"demo\"></p>\n"},{"path":"public/Kamernet Puppeteer.md","publish":true,"title":"Kamernet Puppeteer","description":"Automatic message sender to new adverts on Kamernet using puppeteer.","date":"May 2021","tags":["node.js","puppeteer","project"],"content":"\n![[kamernet-puppeteer.jpeg]]\n\nDutch universities do not provide accommodation, but help international students in their search. They provide services like SSH, funda, Pararius, ROOM, ect.\n\nKamernet is one of these platforms. When I began using it, I quickly understood that it is very competetive, and it's not me who chooses a home, but a home (landlord) chooses me. Many landlord have said that they are looking for a Dutch student, or that they need people now, or they say that somebody replied earlier.\n\nSending out messages by hand was a difficult and time consuming task. So, the most obvious solution was make a bot message to every home and hope that I get to a viewing.\n\n## Solution\n\nKamernet Puppeteer is such a bot, it uses Puppeteer (duh.) to automate the process of sending out messages. It turned on every 5 minutes to check if there are any new adverts and this way I would be one of the first to respond.\n\n## Results\n\nI was invited to a few homes, but the deals would not work out. However, through it, I met my future best friend, who helped me to get a room at their house :)\n","md":"<p>![[kamernet-puppeteer.jpeg]]</p>\n<p>Dutch universities do not provide accommodation, but help international students in their search. They provide services like SSH, funda, Pararius, ROOM, ect.</p>\n<p>Kamernet is one of these platforms. When I began using it, I quickly understood that it is very competetive, and it’s not me who chooses a home, but a home (landlord) chooses me. Many landlord have said that they are looking for a Dutch student, or that they need people now, or they say that somebody replied earlier.</p>\n<p>Sending out messages by hand was a difficult and time consuming task. So, the most obvious solution was make a bot message to every home and hope that I get to a viewing.</p>\n<h2>Solution</h2>\n<p>Kamernet Puppeteer is such a bot, it uses Puppeteer (duh.) to automate the process of sending out messages. It turned on every 5 minutes to check if there are any new adverts and this way I would be one of the first to respond.</p>\n<h2>Results</h2>\n<p>I was invited to a few homes, but the deals would not work out. However, through it, I met my future best friend, who helped me to get a room at their house :)</p>\n"},{"path":"public/Markov Chain Text Generator.md","publish":true,"title":"Markov Chain Text Generator","description":"Text generator written in React.js that uses Markov chains to generate text based on a given input.","date":"Aug 6, 2022","tags":["react","node.js","markov-chain","project"],"content":"\n![banner](/images/projects/markov-chain-text.jpeg)\n\nRecently, I was reading in the Y.Practicum blog and found a [group of posts](https://thecode.media/markov-chain/) there about Markov chains. The articles were written in a easy to understand and engaging way, and I thought it would be interesting to see for myself how the algorithm works.\n\nFirst of all, the definition:\n\n> Markov chains are a sequence of events or actions, where each new event depends only on the previous one and does not take into account all other events. Such an algorithm does not remember what happened before, but only looks at the previous state.\n\nIt will be easier to understand if you look at the following example:\n\n```javascript\nconst dataset = [\"I am a human\", \"I am a programmer\", \"I am not a dog\"];\n```\n\nThis dataset results in the following tree diagram:\n\n![](/images/projects/markov-chain-text/diagram.png)\n\nIn context of text generation, each word is an event. The next word is selected randomly from the words that stood after the last word. The probability of each word transition is determined by the frequency of the pair. After a random word is selected, the same thing is repeated with the sentence until the final word appears.\n\nIn the example from the image, after the word “a” in the source text there could be the words “programmer”, “human”, and “dog”. So, the new sentences that can be generated from the dataset are:\n\n> I am not a programmer\n>\n> I am not a human\n>\n> I am a dog\n\nIt certainly doesn't compare to GPT-3 or Copilot, but the results are sure ridiculous.\n\n## Results\n\nExample in russian\n\n![demo](https://github.com/nomomon/markov-chain-text/raw/master/screenshot.png)\n","md":"<p><img src=\"/images/projects/markov-chain-text.jpeg\" alt=\"banner\"></p>\n<p>Recently, I was reading in the Y.Practicum blog and found a <a href=\"https://thecode.media/markov-chain/\">group of posts</a> there about Markov chains. The articles were written in a easy to understand and engaging way, and I thought it would be interesting to see for myself how the algorithm works.</p>\n<p>First of all, the definition:</p>\n<blockquote>\n<p>Markov chains are a sequence of events or actions, where each new event depends only on the previous one and does not take into account all other events. Such an algorithm does not remember what happened before, but only looks at the previous state.</p>\n</blockquote>\n<p>It will be easier to understand if you look at the following example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> dataset = [<span class=\"hljs-string\">&quot;I am a human&quot;</span>, <span class=\"hljs-string\">&quot;I am a programmer&quot;</span>, <span class=\"hljs-string\">&quot;I am not a dog&quot;</span>];\n</code></pre>\n<p>This dataset results in the following tree diagram:</p>\n<p><img src=\"/images/projects/markov-chain-text/diagram.png\" alt=\"\"></p>\n<p>In context of text generation, each word is an event. The next word is selected randomly from the words that stood after the last word. The probability of each word transition is determined by the frequency of the pair. After a random word is selected, the same thing is repeated with the sentence until the final word appears.</p>\n<p>In the example from the image, after the word “a” in the source text there could be the words “programmer”, “human”, and “dog”. So, the new sentences that can be generated from the dataset are:</p>\n<blockquote>\n<p>I am not a programmer</p>\n<p>I am not a human</p>\n<p>I am a dog</p>\n</blockquote>\n<p>It certainly doesn’t compare to GPT-3 or Copilot, but the results are sure ridiculous.</p>\n<h2>Results</h2>\n<p>Example in russian</p>\n<p><img src=\"https://github.com/nomomon/markov-chain-text/raw/master/screenshot.png\" alt=\"demo\"></p>\n"},{"path":"public/Pipe Thickness Calculator.md","publish":true,"title":"Pipe Thickness Calculator","description":"Application for calculating pipe thickness based on material properties and exporting calculations into a word document.","date":"Jun 5 2022","tags":["html&css","node.js","electron","github-actions","project"],"content":"\n![[pipe-thickness-calculator.jpeg]]\n\n## Preview\n\nThis is how the application looks.\n\n![title_screen](https://github.com/nomomon/pipe-thickness-calculator/raw/v1.0.0/assets/preview/title_screen.png)\n\nThis is what the resulting word document looks like.\n\n![output_document](https://github.com/nomomon/pipe-thickness-calculator/raw/v1.0.0/assets/preview/output_document.png)\n","md":"<p>![[pipe-thickness-calculator.jpeg]]</p>\n<h2>Preview</h2>\n<p>This is how the application looks.</p>\n<p><img src=\"https://github.com/nomomon/pipe-thickness-calculator/raw/v1.0.0/assets/preview/title_screen.png\" alt=\"title_screen\"></p>\n<p>This is what the resulting word document looks like.</p>\n<p><img src=\"https://github.com/nomomon/pipe-thickness-calculator/raw/v1.0.0/assets/preview/output_document.png\" alt=\"output_document\"></p>\n"}]},"__N_SSG":true}